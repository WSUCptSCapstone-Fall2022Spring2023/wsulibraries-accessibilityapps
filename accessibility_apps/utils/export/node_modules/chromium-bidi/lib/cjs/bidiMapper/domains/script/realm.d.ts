/**
 * Copyright 2022 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Protocol } from 'devtools-protocol';
import { CommonDataTypes, Script } from '../../../protocol/protocol.js';
import { CdpClient } from '../../CdpConnection.js';
export declare enum RealmType {
    window = "window"
}
export declare class Realm {
    #private;
    static create(realmId: string, browsingContextId: string, executionContextId: Protocol.Runtime.ExecutionContextId, origin: string, type: RealmType, sandbox: string | undefined, cdpSessionId: string, cdpClient: CdpClient): Realm;
    static findRealms(filter?: {
        realmId?: string;
        browsingContextId?: string;
        executionContextId?: Protocol.Runtime.ExecutionContextId;
        type?: string;
        sandbox?: string;
        cdpSessionId?: string;
    }): Realm[];
    static findRealm(filter: {
        realmId?: string;
        browsingContextId?: string;
        executionContextId?: Protocol.Runtime.ExecutionContextId;
        type?: string;
        sandbox?: string;
        cdpSessionId?: string;
    }): Realm | undefined;
    static getRealm(filter: {
        realmId?: string;
        browsingContextId?: string;
        executionContextId?: Protocol.Runtime.ExecutionContextId;
        type?: string;
        sandbox?: string;
        cdpSessionId?: string;
    }): Realm;
    static clearBrowsingContext(browsingContextId: string): void;
    delete(): void;
    private constructor();
    toBiDi(): Script.RealmInfo;
    get realmId(): string;
    get browsingContextId(): string;
    get executionContextId(): Protocol.Runtime.ExecutionContextId;
    get origin(): string;
    get type(): RealmType;
    get cdpClient(): CdpClient;
    callFunction(functionDeclaration: string, _this: Script.ArgumentValue, _arguments: Script.ArgumentValue[], awaitPromise: boolean, resultOwnership: Script.OwnershipModel): Promise<Script.CallFunctionResult>;
    scriptEvaluate(expression: string, awaitPromise: boolean, resultOwnership: Script.OwnershipModel): Promise<Script.EvaluateResult>;
    disown(handle: string): Promise<void>;
    /**
     * Serializes a given CDP object into BiDi, keeping references in the
     * target's `globalThis`.
     * @param cdpObject CDP remote object to be serialized.
     * @param resultOwnership indicates desired OwnershipModel.
     */
    serializeCdpObject(cdpObject: Protocol.Runtime.RemoteObject, resultOwnership: Script.OwnershipModel): Promise<CommonDataTypes.RemoteValue>;
    /**
     * Gets the string representation of an object. This is equivalent to
     * calling toString() on the object value.
     * @param cdpObject CDP remote object representing an object.
     * @param realm
     * @returns string The stringified object.
     */
    stringifyObject(cdpObject: Protocol.Runtime.RemoteObject): Promise<string>;
}
